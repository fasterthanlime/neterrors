package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"github.com/go-errors/errors"
)

type Entry struct {
	Code        int64
	Description string
	Name        string
}

func main() {
	must(doMain())
}

func doMain() error {
	contents, err := ioutil.ReadFile("./neterrors.json")
	if err != nil {
		return errors.Wrap(err, 0)
	}

	var entries []Entry
	err = json.Unmarshal(contents, &entries)
	if err != nil {
		return errors.Wrap(err, 0)
	}

	out, err := os.Create("./neterrors_windows.go")
	if err != nil {
		return errors.Wrap(err, 0)
	}

	line := func(line string) {
		_, err := out.WriteString(fmt.Sprintf("%s\n", line))
		must(err)
	}

	line("// MACHINE GENERATED BY https://github.com/fasterthanlime/neterrors; DO NOT EDIT")
	line("")
	line("// !build windows")
	line("")
	line("package syscallex")
	line("")
	line("import \"fmt\"")
	line("")
	line("type NERR int")
	line("")
	line("var _ error = (NERR)(0)")
	line("")
	line("const (")
	for _, entry := range entries {
		line(fmt.Sprintf("\t%s = %d", entry.Name, entry.Code))
	}
	line(")")
	line("")
	line("func (n NERR) Error() string {")
	line("\tswitch n {")
	for _, entry := range entries {
		line(fmt.Sprintf("\tcase %s:", entry.Name))
		line(fmt.Sprintf("\t\treturn \"%s\"", entry.Description))
	}
	line("\tdefault:")
	line("\t\treturn fmt.Sprintf(\"NET_API_STATUS=%d\", n)")
	line("\t}")
	line("}")
	line("")

	must(out.Close())
	return nil
}

func must(err error) {
	if err != nil {
		if se, ok := err.(*errors.Error); ok {
			log.Panic(se.ErrorStack())
		}
		log.Panic(err.Error())
	}
}
